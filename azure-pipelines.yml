# trigger:
# - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  subscription: Free Trial (82435e9f-e9f8-4ee0-9375-0ce26318fda2)
  resourceGroup: shegojtstateolu
  storageAccount: shegojtstateolu
  container: tstate
  tfstateFile: terraform.tfstate
  anyTfChanges: false

steps:

- task: TerraformInstaller@0
  displayName: install Terraform v0.12.28
  inputs:
    terraformVersion: '0.12.28'

- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    command: 'init'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: 'Ir8KUGJsl19mewffA7hbPnWbbhcUMH6aBG66T0RUaDCjo6j9Lh2Q1Wd3DqPXD2hcmRf8sTzXR8cUllaWAvjWfg=='
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'pwd && ls -ltr && terraform -h'
- task: TerraformTaskV1@0
  displayName: terraform plan -out=tfplan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    environmentServiceNameAzureRM: '$(subscription)'
    commandOptions: '-out=tfplan -lock=false'
    # commandOptions: '-detailed-exitcode -out=tfplan'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: 'kvhqgNSSszzf4L2mfzTd9uvnTDQQm3ju+qR0Yj1esqboFB/aF2os14xozsBalXUPg77hMB48mE/avuYy041NiQ=='
- task: PowerShell@2
  displayName: detect any terraform change
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    targetType: 'inline'
    script: |
      # Write-Host "LASTEXITCODE : $LASTEXITCODE"
      $plan = $(terraform show -json tfplan | ConvertFrom-Json)
      $actions = $plan.resource_changes.change.actions
      Write-Host "Terraform actions : $actions"
      if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
      {
        Write-Host "Terraform will perform the following actions : $actions"
        Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
      }
      else
      {
        Write-Host "There is no change detected in Terraform tfplan file"
      }

- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  condition: eq(variables.anyTfChanges,Â true)
  inputs:
    provider: 'azurerm'
    command: 'apply '
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    commandOptions: '-lock=false tfplan '
    environmentServiceNameAzureRM: '$(subscription)'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: 'kvhqgNSSszzf4L2mfzTd9uvnTDQQm3ju+qR0Yj1esqboFB/aF2os14xozsBalXUPg77hMB48mE/avuYy041NiQ=='

